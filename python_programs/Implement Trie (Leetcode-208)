class Trie(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.children = [None]*26
        self.isEndofWord = False

        

    def insert(self, word):
        """
        Inserts a word into the trie.
        :type word: str
        :rtype: None
        """
        curr=self
        for i in word:
            index = ord(i)-ord('a')
            if curr.children[index]==None:
                curr.children[index]=Trie()
            curr= curr.children[index]
        curr.isEndofWord = True 
                

        

    def search(self, word):
        """
        Returns if the word is in the trie.
        :type word: str
        :rtype: bool
        """
        curr=self
        for i in word:
            index = ord(i)-ord('a')
            curr = curr.children[index]
            if curr== None:
                return False
        if curr.isEndofWord:
            return True
        return False


    def startsWith(self, prefix):
        """
        Returns if there is any word in the trie that starts with the given prefix.
        :type prefix: str
        :rtype: bool
        """
        curr=self
        for i in prefix:
            index = ord(i)-ord('a')
            curr = curr.children[index]
            if curr== None:
                return False
        return True




# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
